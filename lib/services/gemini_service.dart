import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import '../models/message.dart';
import '../models/product.dart';
import '../models/order.dart';
import '../models/category.dart';
import '../models/voucher.dart';
import '../models/feedback.dart';
import '../constants/app_constants.dart';
import '../constants/config.dart';

class GeminiService {
  static GeminiService? _instance;
  static GeminiService get instance => _instance ??= GeminiService._();
  
  GeminiService._();

  final http.Client _client = http.Client();
  String? _apiKey;

  Future<void> initialize() async {
    // Load API key from config
    _apiKey = Config.geminiApiKey;
  }

  Future<String> generateResponse(
    String userMessage,
    {
    List<Product>? products,
    List<Category>? categories,
    List<Order>? userOrders,
    List<Voucher>? vouchers,
    List<Feedback>? feedbacks,
    String? userEmail,
  }) async {
    try {
      final prompt = _buildPrompt(
        userMessage,
        products: products,
        categories: categories,
        userOrders: userOrders,
        vouchers: vouchers,
        feedbacks: feedbacks,
        userEmail: userEmail,
      );

      final response = await _callGeminiAPI(prompt);
      return response;
    } catch (e) {
      print('Gemini API error: $e');
      return _getErrorMessage(e);
    }
  }

  String _buildPrompt(
    String userMessage, {
    List<Product>? products,
    List<Category>? categories,
    List<Order>? userOrders,
    List<Voucher>? vouchers,
    List<Feedback>? feedbacks,
    String? userEmail,
  }) {
    final buffer = StringBuffer();

    // User info
    buffer.writeln('Kh√°ch h√†ng: ${userEmail ?? "Guest"}\n');

    // Categories
    if (categories != null && categories.isNotEmpty) {
      buffer.writeln('=== DANH M·ª§C ===');
      for (var category in categories) {
        buffer.writeln('- ${category.name}');
      }
      buffer.writeln();
    }

    // Products
    if (products != null && products.isNotEmpty) {
      buffer.writeln('=== S·∫¢N PH·∫®M ===\n');
      for (int i = 0; i < products.length && i < 20; i++) {
        final product = products[i];
        buffer.writeln('${i + 1}. ${product.name}');
        buffer.write('   Gi√°: ${product.realPrice}k');
        if (product.sale > 0) {
          buffer.write(' (Gi·∫£m ${product.sale}%)');
        }
        buffer.writeln();
        buffer.writeln('   Danh m·ª•c: ${product.categoryName}');
        buffer.writeln('   ƒê√°nh gi√°: ${product.rate}‚≠ê (${product.countReviews} ƒë√°nh gi√°)');
        if (product.isFeatured) {
          buffer.writeln('   ‚≠ê S·∫¢N PH·∫®M N·ªîI B·∫¨T');
        }
        if (product.description?.isNotEmpty == true) {
          buffer.writeln('   üìñ M√¥ t·∫£: ${product.description}');
        }
        if (product.info?.isNotEmpty == true) {
          buffer.writeln('   üìö N·ªôi dung: ${product.info}');
        }
        buffer.writeln();
      }
    }

    // User orders
    if (userOrders != null && userOrders.isNotEmpty) {
      buffer.writeln('=== ƒê∆†N H√ÄNG ===\n');
      for (var order in userOrders) {
        buffer.writeln('ƒê∆°n #${order.id}');
        buffer.writeln('- T·ªïng: ${order.totalAmount}k');
        buffer.writeln('- Tr·∫°ng th√°i: ${order.statusText}');
        buffer.writeln('- Ng√†y ƒë·∫∑t: ${order.createdAt?.toIso8601String() ?? 'N/A'}');
        buffer.writeln('- Ph∆∞∆°ng th·ª©c thanh to√°n: ${order.paymentMethod}');
        
        // Note: Order model doesn't have products field, this would need to be implemented
        // if (order.products?.isNotEmpty == true) {
        //   buffer.writeln('- S·∫£n ph·∫©m ƒë√£ mua:');
        //   for (var product in order.products!) {
        //     buffer.writeln('  ‚Ä¢ ${product.name} (SL: ${product.count}, Gi√°: ${product.price}k)');
        //   }
        // }
        
        if (order.address != null) {
          buffer.writeln('- ƒê·ªãa ch·ªâ giao h√†ng:');
          buffer.writeln('  ‚Ä¢ ƒê·ªãa ch·ªâ: ${order.address}');
        }
        buffer.writeln();
      }
    } else {
      buffer.writeln('=== ƒê∆†N H√ÄNG ===\nCh∆∞a c√≥ ƒë∆°n h√†ng.\n');
    }

    // Vouchers
    if (vouchers != null && vouchers.isNotEmpty) {
      buffer.writeln('=== VOUCHER & KHUY·∫æN M√ÉI ===\n');
      for (int i = 0; i < vouchers.length && i < 10; i++) {
        final voucher = vouchers[i];
        buffer.writeln('${i + 1}. ${voucher.name}');
        buffer.writeln('   Gi·∫£m gi√°: ${voucher.discount}%');
        buffer.writeln('   M√¥ t·∫£: ${voucher.description}\n');
      }
    } else {
      buffer.writeln('=== VOUCHER & KHUY·∫æN M√ÉI ===\nHi·ªán t·∫°i ch∆∞a c√≥ voucher n√†o.\n');
    }

    // Feedback
    if (feedbacks != null && feedbacks.isNotEmpty) {
      buffer.writeln('=== PH·∫¢N H·ªíI KH√ÅCH H√ÄNG ===\n');
      for (int i = 0; i < feedbacks.length && i < 10; i++) {
        final feedback = feedbacks[i];
        buffer.writeln('${i + 1}. ${feedback.content}');
        buffer.writeln('   ƒê√°nh gi√°: ${feedback.rate}‚≠ê');
        buffer.writeln('   T·ª´: ${feedback.userEmail}\n');
      }
    } else {
      buffer.writeln('=== PH·∫¢N H·ªíI KH√ÅCH H√ÄNG ===\nCh∆∞a c√≥ ph·∫£n h·ªìi n√†o.\n');
    }

    return '''
B·∫°n l√† tr·ª£ l√Ω ·∫£o th√¥ng minh c·ªßa c·ª≠a h√†ng s√°ch tr·ª±c tuy·∫øn.
Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn (2-3 c√¢u), th√¢n thi·ªán.

${buffer.toString()}

H∆Ø·ªöNG D·∫™N:
- Tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu
- D√πng emoji ph√π h·ª£p üòä
- ∆Øu ti√™n s·∫£n ph·∫©m c√≥ khuy·∫øn m√£i
- G·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p v·ªõi nhu c·∫ßu
- C√≥ th·ªÉ ph√¢n t√≠ch s·∫£n ph·∫©m b√°n ch·∫°y/√≠t b√°n (kh√¥ng n√≥i s·ªë l∆∞·ª£ng c·ª• th·ªÉ)
- Xem ƒë∆∞·ª£c voucher v√† khuy·∫øn m√£i hi·ªán c√≥
- ƒê·ªçc ƒë∆∞·ª£c ph·∫£n h·ªìi kh√°ch h√†ng
- C√ì TH·ªÇ TR·∫¢ L·ªúI CHI TI·∫æT V·ªÄ ƒê∆†N H√ÄNG:
  ‚Ä¢ S√°ch n√†o ƒë√£ mua trong ƒë∆°n h√†ng
  ‚Ä¢ ƒê·ªãa ch·ªâ giao h√†ng (t√™n, SƒêT, ƒë·ªãa ch·ªâ)
  ‚Ä¢ Tr·∫°ng th√°i ƒë∆°n h√†ng
  ‚Ä¢ Ph∆∞∆°ng th·ª©c thanh to√°n
  ‚Ä¢ Ng√†y ƒë·∫∑t h√†ng
- C√ì TH·ªÇ ƒê·ªåC N·ªòI DUNG S√ÅCH:
  ‚Ä¢ M√¥ t·∫£ chi ti·∫øt c·ªßa s√°ch
  ‚Ä¢ N·ªôi dung, t√≥m t·∫Øt s√°ch
  ‚Ä¢ Th√¥ng tin v·ªÅ t√°c gi·∫£, nh√† xu·∫•t b·∫£n
  ‚Ä¢ Gi·ªõi thi·ªáu v·ªÅ cu·ªën s√°ch
  ‚Ä¢ Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ n·ªôi dung s√°ch
- N·∫øu kh√¥ng c√≥ th√¥ng tin, th·ª´a nh·∫≠n l·ªãch s·ª±

C√¢u h·ªèi: $userMessage
    ''';
  }

  Future<String> _callGeminiAPI(String prompt) async {
    final url = Uri.parse(AppConstants.geminiApiUrl);

    final requestBody = {
      'contents': [
        {
          'parts': [
            {'text': prompt}
          ]
        }
      ]
    };

    final response = await _client.post(
      url,
      headers: {
        'x-goog-api-key': _apiKey!,
        'Content-Type': 'application/json',
      },
      body: jsonEncode(requestBody),
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      final candidates = data['candidates'];
      
      if (candidates != null && candidates.isNotEmpty) {
        final content = candidates[0]['content'];
        final parts = content['parts'];
        
        if (parts.isNotEmpty) {
          return parts[0]['text'];
        }
      }
    }

    throw Exception('API Error ${response.statusCode}: ${response.body}');
  }

  String _getErrorMessage(dynamic error) {
    final errorStr = error.toString().toLowerCase();
    
    if (errorStr.contains('api_key_invalid') || 
        errorStr.contains('api key not valid') ||
        errorStr.contains('400')) {
      return '‚ùå API key kh√¥ng h·ª£p l·ªá!\n\nVui l√≤ng:\n1. V√†o https://aistudio.google.com/app/apikey\n2. T·∫°o key m·ªõi\n3. C·∫≠p nh·∫≠t API key trong ·ª©ng d·ª•ng';
    } else if (errorStr.contains('resource_exhausted') || 
               errorStr.contains('429')) {
      return '‚è∞ V∆∞·ª£t gi·ªõi h·∫°n 60 requests/ph√∫t.\n\nƒê·ª£i 1 ph√∫t nh√©!';
    } else if (errorStr.contains('permission_denied') || 
               errorStr.contains('403')) {
      return 'üîí API key kh√¥ng c√≥ quy·ªÅn.\n\nEnable Generative Language API trong Google Cloud Console.';
    } else if (errorStr.contains('timeout')) {
      return '‚è±Ô∏è Timeout. Th·ª≠ l·∫°i nh√©!';
    } else if (errorStr.contains('unable to resolve host')) {
      return 'üì° Kh√¥ng c√≥ m·∫°ng. Ki·ªÉm tra WiFi/Data!';
    } else {
      return '‚ö†Ô∏è L·ªói: $error\n\nTh·ª≠ l·∫°i nh√©!';
    }
  }

  // Chat history management
  Future<void> saveChatHistory(List<Message> messages, String userEmail) async {
    final prefs = await SharedPreferences.getInstance();
    final historyKey = '${AppConstants.chatHistoryKey}_$userEmail';
    
    final historyJson = messages.map((msg) => msg.toJson()).toList();
    await prefs.setString(historyKey, jsonEncode(historyJson));
  }

  Future<List<Message>> loadChatHistory(String userEmail) async {
    final prefs = await SharedPreferences.getInstance();
    final historyKey = '${AppConstants.chatHistoryKey}_$userEmail';
    
    final historyStr = prefs.getString(historyKey);
    if (historyStr != null) {
      try {
        final historyList = jsonDecode(historyStr) as List;
        return historyList.map((json) => Message.fromJson(json)).toList();
      } catch (e) {
        print('Error loading chat history: $e');
      }
    }
    
    return [];
  }

  Future<void> clearChatHistory(String userEmail) async {
    final prefs = await SharedPreferences.getInstance();
    final historyKey = '${AppConstants.chatHistoryKey}_$userEmail';
    await prefs.remove(historyKey);
  }

  void dispose() {
    _client.close();
  }
}
